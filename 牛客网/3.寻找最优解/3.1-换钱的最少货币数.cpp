/*

链接：https://www.nowcoder.com/questionTerminal/4e05294fc5aa4d4fa8eacef2e606e5a8?f=discussion
来源：牛客网


这道题可用动态规划的方法求解。动态规划的实质就是在计算过程中，根据动态规划表计算下一个目标值，并更新动态规划表。本题中，可以构造动态规划表dp[i][j]:
i:代表可以使用的货币种类为arr[0],arr[1],...,arr[i]
j:代表需要兑换的面值，其范围是[0, aim], 因此二维数组的列数应为aim+1
构造过程：
1、边界值
dp[0...N-1][0]:规划表的第一列，表示当需要兑换0元时，需要的货币数，显然需要货币数为0，因此直接设置为0；
dp[0][0...aim+1]:规划表的第一行，表示只使用一种货币arr[0]兑换面值0...aim面值需要的货币数，因此只要tmp_aim能够整除arr[0],返回整除后得到的商即可。
2、更新动态规划表
逐行更新，每行从左至右更新。
更新公式：
dp[i][j] = min(dp[i][j-arr[i]]+1, dp[i-1][j])
空间优化：通过计算发现，动态规划表的下一行与上一行有直接联系，每次计算之后上一行实际上就不再起作用了，因此在计算时只需知道“前一行”即可。所以，本题可将空间优化成

*/

///////////【解题，非原创】
// 做法1(复杂度低)：
// 把所有的钱能够凑成的总数作为状态i，dp[i]表示凑成i金额的钱币的数目
// 内循环为给的不同钱币，新增一种不同面值的钱，就去更新大于该币种的所有状态

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdlib.h>
using  namespace std;

#define INT_MAX   1000

int main(){
	int n, aim;
	cin >> n >> aim;
	vector<int> arr(n, 0);
	for (int i = 0; i < n; ++i){
		cin >> arr[i];
	}

	vector<int> dp(aim + 1, INT_MAX);
	dp[0] = 0;

	for (int i = 0; i < n; ++i)
	{
		for (int j = arr[i]; j <= aim; ++j)	
		{
			if (dp[j - arr[i]] != INT_MAX)
			{		
				dp[j] = min(dp[j], dp[j - arr[i]] + 1);
			}
		}
	}

	if (dp[aim] == INT_MAX) cout << "-1" << endl;
	else  cout << dp[aim] << endl;

	system("pause");
	return 0;
}










///////递归的暴力搜索，时间复杂度太高。2的n次方的时间复杂度。。这里就是2^1000，重复计算田铎。。不可取。。。
///////////实现方法2：回溯+递归，但是时间复杂度太大了，测试不能通过####但是解题思路是可以参考的.
//==================================================================
#include <iostream>
#include <vector>
#include <algorithm>
#include <stdlib.h>
using  namespace std;

#define MAX_NUM 5000

//第一想法：暴力搜索，过程是先从大到小sort钱币数组，去数组第一个最大值可取得的最多张钱，然后贪心的后找剩余钱，若找不到；
//逐步回溯到上次，减少取钱的数目，若回溯到了最开始的地方，且都没找到，取第二大的值，进行同样操作；
//递归设计，设minMoney为给定了钱币数组arr，从cur开始取钱，取total数目的钱的最少货币数。
void minMoney(int arrTest[],int arrLength, int cur, int total, int iNumResult, int *result)
{
	for (int i = cur; i < arrLength; ++i)
	{
		int num = total / arrTest[i]; //当前取多少钱
		int resi = total % arrTest[i]; //还剩多少要取；
				
		if (num == 0)
		{
			minMoney(arrTest, arrLength, cur + 1, total, num + iNumResult, result);
		}

		if (resi == 0)
		{
			if ((*result) > num+iNumResult)
			{
				*result = num+iNumResult;
			}
			return; //已经取完了；
		}
		else
		{
			minMoney(arrTest, arrLength, cur + 1, resi, num + iNumResult, result);
		}
	}

	return;
}

bool greaterArr(int A, int B)
{
	return A > B;
}

//测试数据
//5,107
// 3,4,50,57,100
int main(){
	int n=1000, aim=5000;
//	cin >> n >> aim;
	int arrTest[MAX_NUM] = { 4265, 423, 1863, 305, 1191, 1812, 667, 2812, 4038, 2837, 2870, 1688, 2556, 1508, 3046, 467, 2368, 4119, 4130, 206, 3786, 3594, 2854, 1741, 4292, 1516, 2449, 3285, 4682, 648, 101, 1614, 2078, 2142, 735, 3211, 183, 3785, 3896, 3247, 1923, 2953, 923, 4147, 1604, 3832, 1598, 2214, 3752, 2208, 1100, 3776, 4389, 1938, 418, 2260, 1425, 3237, 664, 1592, 3475, 559, 4599, 2672, 596, 4158, 2646, 286, 875, 269, 2064, 1752, 1064, 4536, 2346, 4067, 2101, 992, 2366, 2182, 4138, 1326, 4713, 4352, 1955, 3208, 455, 1875, 3192, 4329, 2754, 2065, 1025, 140, 3943, 827, 2437, 801, 3114, 2585, 1163, 558, 1132, 4145, 1586, 4880, 345, 281, 1892, 2490, 2263, 439, 1712, 2628, 4019, 4940, 2264, 1920, 4414, 4452, 4056, 9, 785, 602, 4905, 1205, 2412, 2625, 4388, 4133, 4557, 1690, 3282, 1295, 619, 2684, 3538, 1881, 2231, 3215, 419, 1577, 3773, 146, 4160, 1896, 4906, 1499, 4385, 1600, 4419, 4926, 4768, 3307, 1102, 4343, 1249, 2598, 4464, 555, 2473, 1582, 4190, 1234, 3579, 3706, 2592, 4408, 2351, 4001, 4195, 884, 668, 1373, 4415, 936, 247, 2392, 1368, 2026, 1693, 1941, 4024, 554, 3613, 1259, 3413, 2989, 3057, 2645, 4030,4993, 1342, 4782, 2788, 147, 3050, 683, 4687, 2685, 1726, 1591, 4612, 2381, 2409, 3276, 4537, 1556, 2329, 1512, 953, 1222, 1427, 3043, 1192, 1654, 215, 3225, 4900, 3162, 3229, 184, 4636, 828, 3951, 284, 2087, 317, 4672, 261, 552, 4210, 2129, 4455, 2957, 4608, 3254, 2686, 4460, 1845, 3120, 2342, 303, 3761, 76, 1851, 4563, 2054, 2020, 1172, 3843, 3916, 948, 1494, 128, 4111,6, 1569, 1549, 2835, 3302, 1285, 4651, 4123, 3132, 1356, 2583, 924, 1079, 4442, 1810, 1084, 1671, 4201, 4331, 3784, 2652, 562, 2708, 2223, 3835, 4755, 3340, 2849, 4170, 837, 873, 1704, 3557, 3144, 329, 4324, 380, 1484, 2637, 2028, 382, 3924, 4924, 1180, 3797, 3486, 3009, 179, 2768, 4075, 1795, 826, 687, 2199, 3100, 4848, 3666, 3561, 4080, 4451, 1223, 3717, 421, 1908, 4982, 4710, 3187, 1464, 978, 4506, 3434, 2295, 3366, 2755, 729, 411, 4772, 3505, 343, 501, 4503, 2125, 4737, 4217, 1824, 1314, 734, 4976, 4634, 2153, 485, 2658, 4376, 1042, 4078, 4558, 2838, 225, 2677, 580, 2845, 3810, 912, 114, 2037, 811, 3397, 1616, 4527, 2429, 1210, 3753, 1088, 2252, 3336, 2879, 2666, 2576, 1160, 2100, 718, 1952, 224, 1447, 1263, 899, 4036, 3769, 2229, 2196, 3874, 2247, 998, 203, 4619, 2003, 1301, 1479, 1466, 3817, 3347, 77, 4758, 605, 1689, 1912, 2626, 3372, 973, 3274, 1428, 2785, 2350, 3014, 4609, 3846, 1098, 1352, 1502, 3870, 2505, 4257, 538, 2615, 571, 2375, 2711, 2023, 3502, 2239, 2571, 2461, 3244, 1313, 4554, 969, 3188, 1046, 1255, 4129, 3537, 1400, 4116, 1069, 3674, 3314, 4786, 3519, 3105, 909, 1601, 1058, 3373, 3733, 3506, 4799, 1414, 2253, 3011, 3541, 509, 126, 2428, 3213, 482, 988, 930, 60, 4410, 1254, 393, 3190, 3401, 771, 2234, 881, 367, 4646, 4695, 4560, 2859, 754, 2434, 4276, 1808, 3615, 1092, 1343, 3645, 137, 4256, 494, 3154, 3637, 2038, 3574, 4574, 3122, 4267, 1573, 593, 1465, 4025, 93, 438, 3174, 1793, 630, 2470, 4395, 716, 1857, 508, 868, 4004, 3353, 4476, 4341, 4514, 3076, 148, 4817, 4762, 3471, 1981, 1854, 3294, 1551, 4944, 4092, 4928, 1540, 2678, 3084, 2093, 1866, 1177, 567, 2644, 4683, 1467, 633, 2990, 4815, 4296, 95, 516, 1091, 527, 366, 4688, 15, 3345, 1371, 789, 4187, 1322, 4213, 4268, 2611, 246, 2767, 4524, 3644, 3600, 2414, 2185, 906, 3703, 3035, 4541, 1498, 2118, 1015, 2747, 2310, 717, 1829, 3476, 872, 3426, 1868, 52, 2089, 2240, 2358, 4042, 2289, 786, 4879, 1418, 521, 1729, 309, 3204, 4432, 1110, 3763, 1009, 2001, 2527, 2934, 4564, 1799, 4155, 97, 1131, 1677, 1699, 454, 968, 4767, 3389, 2016, 3359, 577, 2993, 1956, 845, 1764, 557, 4698, 3289, 1968, 3618, 1701, 124, 2014, 2589, 1645, 2151, 2724, 1225, 2404, 1483, 4637, 457, 1449, 696, 2639, 2856, 1408, 802, 4723, 195, 3815, 805, 1107, 4253, 213, 3649, 3794, 584, 1515, 517, 1906, 3365, 1692, 695, 223, 713, 193, 135, 82, 850, 4931, 2352, 582, 3404, 2790, 296, 4051, 1632, 3512, 299, 3996, 4360, 2808, 1816, 1422, 3966, 561, 3779, 4105, 4843, 57, 2400, 490, 1274, 3185, 460, 4719, 35, 3402, 2387, 3462, 1219, 1168, 4542, 2671, 4546, 2313, 3608, 2393, 3973, 136, 1275, 4869, 142, 3598, 4453, 3121, 4670, 1784, 1218, 679, 1229, 757, 986, 4226, 3813, 2573, 4237, 1243, 1545, 1766, 3453, 1157, 548, 3933, 581, 4650, 2701, 1734, 1727, 2445, 2049, 3425, 961, 1825, 3736, 4596, 2416, 1660, 3227, 1170, 851, 279, 426, 1020, 2017, 2740, 736, 1640, 3840, 2728, 2451, 1085, 83, 1386, 3053, 1204, 1363, 3712, 1713, 1700, 2088, 4113, 4363, 1104, 1028, 4440, 2931, 3268, 1932, 2522, 1280, 4618, 803, 1731, 2094, 3015, 3656, 1925, 3223, 2719, 2567, 3887, 228, 1621, 4978, 4730, 4937, 2761, 3103, 4621, 3907, 272, 4012, 3117, 2424,1, 3768, 4893, 1720, 3590, 4975, 4435, 1010, 3707, 4568, 100, 190, 2618, 372, 3994, 1876, 797, 4507, 4345, 1045, 705, 2193, 4795, 3392, 2548, 3414, 597, 3249, 1376, 3767, 835, 1242, 3650, 3141, 332, 2911, 507, 3759, 1114, 381, 990, 1934, 410, 910, 3354, 3159, 3593, 3555, 3837, 3241, 1803, 2919, 2552, 3152, 1152, 941, 324, 191, 2900, 3532, 3496, 1253, 4425, 310, 2982, 2778, 3937, 4068, 2244, 3432, 2061, 3032, 2309, 2707, 1135, 1230, 3153, 3589, 887, 2528, 243, 2459, 1916, 4344, 2886, 3976, 207, 625, 575, 3958, 4330, 160, 3866, 1227, 4855, 755, 4048, 3772, 4322, 2174, 3839, 3416, 3633, 1583, 2925, 1455, 2600, 3058, 2057, 4671, 4230, 526, 4604, 2819, 474, 4925, 1676, 1194, 1167, 767, 3965, 3257, 4311, 4437, 2485, 653, 1299, 194, 4177, 502, 1649, 4790, 4103, 3662, 762, 4072, 1065, 3433, 654, 3696, 96, 480, 4973, 3439, 1950, 2373, 1039, 218, 1878, 1507, 725, 1682, 2746, 898, 3178, 1994, 2367, 4716, 3554, 3542, 260, 3670, 2744, 371, 2237, 3143, 2198, 1256, 4956, 4520, 3212, 3059, 32, 1052, 3604, 2, 3019, 4071, 3718, 2114, 3627, 1855, 2803, 2579, 1004, 933, 8, 4783, 69, 569, 3444, 4369, 1066, 3960, 3869, 4972, 3680, 673, 790, 1789, 4251, 1624, 1443 };
	int iResult = MAX_NUM +1;
	//for (int i = 0; i < n; i++)
	//{
	//	int tempInput = 0;
	//	cin >> tempInput;
	//	arrTest[i] = tempInput;
	//}



	std::sort(arrTest, arrTest + MAX_NUM, greaterArr);//从大到小排序
	minMoney(arrTest, n, 0, aim, 0, &iResult);
	if (0 == aim)
	{
		cout << 0;
	}
	else if (iResult == MAX_NUM + 1)
	{
		cout << -1;
	}
	else
	{
		cout << iResult;
	}

	system("pause");
	return 0;
}



